import requests 
import time
from config import Config
from log_manager import LogManager
from logger import Logger

def get_users_in_search_of_parties():
    '''Busca usu√°rios que est√£o procurando por grupos no Habitica.'''
    
    try:
        # Requisi√ß√£o para obter todos os usu√°rios procurando por grupos
        response = requests.get(
            url='https://habitica.com/api/v3/looking-for-party',
            headers=Config.HEADERS,
            timeout=10
        )
        # Verifica se status_code est√° entre 200 e 399, se estiver segue o fluxo normal
        response.raise_for_status()
        return response.json().get('data', [])
    # Trata erros de timeout
    except requests.exceptions.Timeout:
        Logger.warning('‚ùå Timeout ao buscar usu√°rios procurando por grupo.')
        return []
    # Trata outros erros de requisi√ß√£o
    except requests.exceptions.RequestException as e:
        Logger.warning(f'‚ùå Erro na requisi√ß√£o: {e}')
        return []    

def filter_eligible_users(users_searching_for_party):
    '''Filtra usu√°rios eleg√≠veis com base em idioma e n√≠vel, al√©m de verificar se j√° foram convidados.'''
    # Lista de usu√°rios que atendem aos crit√©rios
    eligible_users = []

    # Carrega os UUIDs j√° convidados
    already_invited_uuids = LogManager.load_invited_uuids()

    # Filtra os usu√°rios com base nos crit√©rios e se j√° foram convidados, adicionando apenas os eleg√≠veis na lista
    for user in users_searching_for_party:
        if user.get('preferences',{}).get('language') == Config.WANTED_LANGUAGE and user.get('stats',{}).get('lvl') >= Config.MIN_LEVEL and user.get('_id') not in already_invited_uuids:
            eligible_users.append(user)
         
    return eligible_users

    
def invite_users_to_a_group(eligible_users):
    '''Envia convites para at√© dois usu√°rios eleg√≠veis.'''

    # Pega os UUIDs dos dois primeiros usu√°rios eleg√≠veis
    uuids = [user.get('_id') for user in eligible_users[:2]]
    try:
        # Requisi√ß√£o para enviar convites aos usu√°rios eleg√≠veis
        response = requests.post(
            url = f'https://habitica.com/api/v3/groups/{Config.GROUP_ID}/invite',
            headers = Config.HEADERS,
            json = {'uuids': uuids},
            timeout=10
        )
        # Verifica se status_code est√° entre 200 e 399, se estiver segue o fluxo normal
        response.raise_for_status()
        # Salva os UUIDs convidados no log
        LogManager.save_new_invites(uuids)

        # Log individual para cada usu√°rio
        for user in eligible_users[:2]:
            name = user.get('profile').get('name')
            username = user.get('auth').get('local').get('username')
            Logger.convite_enviado(name, username)

    # Trata erros de timeout   
    except requests.exceptions.Timeout:
        Logger.warning('‚ùå Timeout ao enviar convites para usu√°rios.')
        return
    # Trata outros erros de requisi√ß√£o
    except requests.exceptions.RequestException as e:
        Logger.warning(f'‚ùå Erro na requisi√ß√£o: {e}')
        return
    
def main():
    '''Loop principal para buscar, filtrar e convidar usu√°rios.'''

    # Inicializa o sistema de logging
    Logger.setup()

    Logger.info('üöÄ Iniciando aplica√ß√£o Habitica Group Manager - Invite Users')

    # Valida as configura√ß√µes essenciais
    Config.validate()
    Logger.info(f'üìä Filtros: Level >= {Config.MIN_LEVEL}, Idioma: {Config.WANTED_LANGUAGE}')

    Logger.info('üîç Buscando usu√°rios procurando grupo...')

    # Loop infinito para buscar, filtrar e convidar usu√°rios a cada 30 segundos
    try:
        while True:
            users_searching_for_party = get_users_in_search_of_parties()
            if users_searching_for_party:
                eligible_users = filter_eligible_users(users_searching_for_party)
                if eligible_users:
                    invite_users_to_a_group(eligible_users)
            time.sleep(30) # Tempo de espera citado na documenta√ß√£o da API, n√£o colocar abaixo disso.
    except KeyboardInterrupt:
        Logger.info('üõë Encerrando o script de convite de usu√°rios.')

if __name__ == '__main__':
    main()